/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MepDatepicker {
        "dataFormat": string;
        "disableFuture": boolean;
        "disablePast": boolean;
        "displayFormat": string;
        "fromName": string;
        "fromValue": any;
        "isRange": boolean;
        "label": string;
        "maxRange": number;
        "name": string;
        "placeholder": string;
        "separator": string;
        "timezone": string;
        "toName": string;
        "toValue": any;
        "value": any;
        "withTime": boolean;
    }
    interface MepDatepickerCopy {
        "dataFormat": string;
        "disableFuture": boolean;
        "disablePast": boolean;
        "displayFormat": string;
        "fromName": string;
        "fromValue": any;
        "isRange": boolean;
        "label": string;
        "maxRange": number;
        "name": string;
        "placeholder": string;
        "separator": string;
        "timezone": string;
        "toName": string;
        "toValue": any;
        "value": any;
        "withTime": boolean;
    }
    interface MepDropdown {
        "filterPayload": any;
        "items": string;
        "label": string;
        "listId": string;
        "multiple": boolean;
        "name": string;
        "pageSize": number;
        "placeholder": string;
        "searchable": boolean;
    }
    interface MepInput {
        "label": string;
        "name": string;
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface MepListing {
        "filterData": (payload: any, firstCall: any) => Promise<void>;
        "filters": any;
        "listId": string;
        "pageSize": number;
        "url": string;
    }
    interface MepOperations {
        "label": string;
        "name": string;
        "operations": string;
    }
    interface MepPagination {
        "currentPage": number;
        "maxVisibleButtons": number;
        "pageSize": number;
        "totalCount": number;
    }
}
declare global {
    interface HTMLMepDatepickerElement extends Components.MepDatepicker, HTMLStencilElement {
    }
    var HTMLMepDatepickerElement: {
        prototype: HTMLMepDatepickerElement;
        new (): HTMLMepDatepickerElement;
    };
    interface HTMLMepDatepickerCopyElement extends Components.MepDatepickerCopy, HTMLStencilElement {
    }
    var HTMLMepDatepickerCopyElement: {
        prototype: HTMLMepDatepickerCopyElement;
        new (): HTMLMepDatepickerCopyElement;
    };
    interface HTMLMepDropdownElement extends Components.MepDropdown, HTMLStencilElement {
    }
    var HTMLMepDropdownElement: {
        prototype: HTMLMepDropdownElement;
        new (): HTMLMepDropdownElement;
    };
    interface HTMLMepInputElement extends Components.MepInput, HTMLStencilElement {
    }
    var HTMLMepInputElement: {
        prototype: HTMLMepInputElement;
        new (): HTMLMepInputElement;
    };
    interface HTMLMepListingElement extends Components.MepListing, HTMLStencilElement {
    }
    var HTMLMepListingElement: {
        prototype: HTMLMepListingElement;
        new (): HTMLMepListingElement;
    };
    interface HTMLMepOperationsElement extends Components.MepOperations, HTMLStencilElement {
    }
    var HTMLMepOperationsElement: {
        prototype: HTMLMepOperationsElement;
        new (): HTMLMepOperationsElement;
    };
    interface HTMLMepPaginationElement extends Components.MepPagination, HTMLStencilElement {
    }
    var HTMLMepPaginationElement: {
        prototype: HTMLMepPaginationElement;
        new (): HTMLMepPaginationElement;
    };
    interface HTMLElementTagNameMap {
        "mep-datepicker": HTMLMepDatepickerElement;
        "mep-datepicker-copy": HTMLMepDatepickerCopyElement;
        "mep-dropdown": HTMLMepDropdownElement;
        "mep-input": HTMLMepInputElement;
        "mep-listing": HTMLMepListingElement;
        "mep-operations": HTMLMepOperationsElement;
        "mep-pagination": HTMLMepPaginationElement;
    }
}
declare namespace LocalJSX {
    interface MepDatepicker {
        "dataFormat"?: string;
        "disableFuture"?: boolean;
        "disablePast"?: boolean;
        "displayFormat"?: string;
        "fromName"?: string;
        "fromValue"?: any;
        "isRange"?: boolean;
        "label"?: string;
        "maxRange"?: number;
        "name"?: string;
        "placeholder"?: string;
        "separator"?: string;
        "timezone"?: string;
        "toName"?: string;
        "toValue"?: any;
        "value"?: any;
        "withTime"?: boolean;
    }
    interface MepDatepickerCopy {
        "dataFormat"?: string;
        "disableFuture"?: boolean;
        "disablePast"?: boolean;
        "displayFormat"?: string;
        "fromName"?: string;
        "fromValue"?: any;
        "isRange"?: boolean;
        "label"?: string;
        "maxRange"?: number;
        "name"?: string;
        "placeholder"?: string;
        "separator"?: string;
        "timezone"?: string;
        "toName"?: string;
        "toValue"?: any;
        "value"?: any;
        "withTime"?: boolean;
    }
    interface MepDropdown {
        "filterPayload"?: any;
        "items"?: string;
        "label"?: string;
        "listId"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "pageSize"?: number;
        "placeholder"?: string;
        "searchable"?: boolean;
    }
    interface MepInput {
        "label"?: string;
        "name"?: string;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface MepListing {
        "filters"?: any;
        "listId"?: string;
        "onCell-click"?: (event: CustomEvent<any>) => void;
        "pageSize"?: number;
        "url"?: string;
    }
    interface MepOperations {
        "label"?: string;
        "name"?: string;
        "onPerform-operation"?: (event: CustomEvent<any>) => void;
        "operations"?: string;
    }
    interface MepPagination {
        "currentPage"?: number;
        "maxVisibleButtons"?: number;
        "onPage-change"?: (event: CustomEvent<any>) => void;
        "pageSize"?: number;
        "totalCount"?: number;
    }
    interface IntrinsicElements {
        "mep-datepicker": MepDatepicker;
        "mep-datepicker-copy": MepDatepickerCopy;
        "mep-dropdown": MepDropdown;
        "mep-input": MepInput;
        "mep-listing": MepListing;
        "mep-operations": MepOperations;
        "mep-pagination": MepPagination;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mep-datepicker": LocalJSX.MepDatepicker & JSXBase.HTMLAttributes<HTMLMepDatepickerElement>;
            "mep-datepicker-copy": LocalJSX.MepDatepickerCopy & JSXBase.HTMLAttributes<HTMLMepDatepickerCopyElement>;
            "mep-dropdown": LocalJSX.MepDropdown & JSXBase.HTMLAttributes<HTMLMepDropdownElement>;
            "mep-input": LocalJSX.MepInput & JSXBase.HTMLAttributes<HTMLMepInputElement>;
            "mep-listing": LocalJSX.MepListing & JSXBase.HTMLAttributes<HTMLMepListingElement>;
            "mep-operations": LocalJSX.MepOperations & JSXBase.HTMLAttributes<HTMLMepOperationsElement>;
            "mep-pagination": LocalJSX.MepPagination & JSXBase.HTMLAttributes<HTMLMepPaginationElement>;
        }
    }
}
